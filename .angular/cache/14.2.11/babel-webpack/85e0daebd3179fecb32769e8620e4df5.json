{"ast":null,"code":"function getArrayDrawingComponents(set) {\n  return Array.from(set.values()).filter(c => c && !!c.draw);\n}\n\nexport let NgCanvas = /*#__PURE__*/(() => {\n  class NgCanvas {\n    constructor(ngZone, config) {\n      this.ngZone = ngZone;\n      this.config = config;\n      this.componentSet = new Set();\n      this.componentsDrawings = [];\n      this.element = document.createElement('canvas');\n      this.element.style.position = 'absolute';\n      this.context = this.element.getContext('2d');\n      this._height = this.element.height;\n      this._width = this.element.width;\n      this.ngZone.runOutsideAngular(() => {\n        window.requestAnimationFrame(time => this.draw(time));\n      });\n    }\n\n    get width() {\n      return this._width;\n    }\n\n    get height() {\n      return this._height;\n    }\n\n    set parent(element) {\n      this._parentElement = element;\n      this.subResizeEvent();\n    }\n\n    subResizeEvent() {\n      this._parentElement && this.resizeObserver && this.resizeObserver.unobserve(this._parentElement); // @ts-ignore\n\n      this.resizeObserver = new ResizeObserver(([entry]) => {\n        const dpr = window.devicePixelRatio || 1;\n        let width = entry.contentRect.width;\n        let height = entry.contentRect.height;\n\n        if (width && height) {\n          width = width;\n          height = height;\n        }\n\n        let resizeDetected = false;\n\n        if (this._width !== width) {\n          this._width = width;\n          this.element.width = width * dpr;\n          this.element.style.width = width + 'px';\n          resizeDetected = true;\n        }\n\n        if (this._height !== height) {\n          this._height = height;\n          this.element.height = height * dpr;\n          this.element.style.height = height + 'px';\n          resizeDetected = true;\n        }\n\n        if (resizeDetected) {\n          if (dpr !== 1) {\n            this.context.scale(dpr, dpr);\n          }\n\n          this.drawWithoutRequestAnimation();\n        }\n      });\n      this.resizeObserver.observe(this._parentElement);\n    }\n\n    resetCanvasSize() {\n      const dpr = window.devicePixelRatio || 1;\n      this.element.width = this._width * dpr;\n      this.element.style.width = this._width + 'px';\n      this.element.height = this._height * dpr;\n      this.element.style.height = this._height + 'px';\n    } // tslint:disable-next-line:typedef\n\n\n    get parent() {\n      return this._parent;\n    } // tslint:disable-next-line:typedef\n\n\n    destroy() {\n      this.resizeObserver && this._parentElement && this.resizeObserver.unobserve(this._parentElement);\n      this.componentSet.clear();\n      this.componentsDrawings = null;\n      this.element && this.element.remove();\n    }\n\n    addClass(name) {\n      this.element.setAttribute('class', name);\n    }\n\n    appendChild(newChild) {\n      newChild.onInit && newChild.onInit(this.context);\n      this.componentSet.add(newChild);\n      this.componentsDrawings = getArrayDrawingComponents(this.componentSet);\n      this.drawAll();\n    }\n\n    removeChild(oldChild) {\n      oldChild.onDestroy && oldChild.onDestroy(this.context);\n      this.componentSet.delete(oldChild);\n      this.componentsDrawings = getArrayDrawingComponents(this.componentSet);\n      this.drawAll();\n    }\n\n    insertBefore(newChild, refChild) {\n      this.componentSet.add(newChild);\n      this.componentsDrawings = getArrayDrawingComponents(this.componentSet);\n      this.drawAll();\n    }\n\n    recalculateElementsDraw() {\n      this.componentsDrawings = getArrayDrawingComponents(this.componentSet);\n    }\n\n    removeAttribute(name, namespace) {\n      this.element.removeAttribute(name);\n    }\n\n    removeClass(name) {\n      this.element.classList.remove(name);\n    }\n\n    removeStyle(style, flags) {// Not supported\n    }\n\n    setAttribute(name, value) {\n      this.element.setAttribute(name, value);\n    }\n\n    setNgAttribute(name, value, namespace) {\n      this.element.setAttribute(name, value);\n    }\n\n    setNgProperty(name, value) {// Not supported\n    }\n\n    setStyle(style, value, flags) {// Not supported\n    }\n\n    setValue(value) {// Not supported\n    }\n\n    drawAll(clear) {\n      this.ngZone.runOutsideAngular(() => {\n        this.requestId && window.cancelAnimationFrame(this.requestId);\n        this.requestId = window.requestAnimationFrame(time => {\n          this.draw(time, clear);\n          this.requestId = null;\n        });\n      });\n    }\n\n    drawWithoutRequestAnimation() {\n      this.ngZone.runOutsideAngular(() => {\n        this.draw(0, false);\n        this.requestId = null;\n      });\n    } // @ts-ignore\n\n\n    draw(time, clear = true) {\n      const context = this.context;\n\n      if (clear) {\n        context.clearRect(0, 0, this.width, this.height);\n      }\n\n      let needDraw = false;\n      const elementsCount = this.componentsDrawings && this.componentsDrawings.length;\n\n      if (elementsCount) {\n        for (let i = 0; i < elementsCount; i++) {\n          this.componentsDrawings[i].draw(context, time);\n          needDraw = needDraw || this.componentsDrawings[i].needDraw;\n        }\n\n        if (needDraw) {\n          this.requestId && window.cancelAnimationFrame(this.requestId);\n          this.requestId = window.requestAnimationFrame(time => this.draw(time));\n        }\n      }\n    }\n\n  }\n\n  NgCanvas.nodeName = 'canvas';\n  return NgCanvas;\n})();","map":null,"metadata":{},"sourceType":"module"}