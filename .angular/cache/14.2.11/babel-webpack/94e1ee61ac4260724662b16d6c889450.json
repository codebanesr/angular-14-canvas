{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { CanvasComponent } from 'angular-canvas';\nimport * as i0 from \"@angular/core\";\nlet GraphCanvasComponent = class GraphCanvasComponent {\n  constructor() {\n    this.showData = false;\n    this.data = getNewData();\n    this.data2 = getNewData();\n    this.data3 = getNewData();\n    this.text = 'Hello world';\n    this.textX = 0;\n    this.textY = 0;\n    this.rectX = 20;\n    this.rectY = 20;\n    this.mouseX = 0;\n    this.mouseY = 0;\n    this.deltaX = 0;\n    this.step = 10;\n  }\n\n  onMouseMove(event) {\n    this.mouseX = event.offsetX;\n    this.mouseY = event.offsetY;\n    this.showData = true;\n  }\n\n  onMouseWheel(event) {\n    event.preventDefault();\n    this.ctrlPressed = event.ctrlKey;\n\n    if (this.ctrlPressed === true) {\n      const step = this.step + event.deltaY / 100;\n\n      if (step > 0.01) {\n        const dxPoints = Math.abs(this.deltaX / this.step);\n        const xPoints = Math.abs(this.mouseX / this.step);\n        const leftPoints = dxPoints + xPoints;\n        const dx = this.mouseX - leftPoints * step;\n        this.deltaX = dx < 0 ? dx : 0;\n        this.step = step;\n      }\n    } else {\n      const deltaX = this.deltaX - event.deltaY;\n      this.deltaX = deltaX < 0 ? deltaX : 0;\n    }\n  }\n\n  onKeyDown(event) {\n    if (event.key === 'Control') {\n      this.ctrlPressed = event.ctrlKey;\n    }\n  }\n\n  onKeyUp(event) {\n    if (event.key === 'Control') {\n      this.ctrlPressed = event.ctrlKey;\n    }\n  }\n\n  onMouseOn() {\n    this.showData = true;\n  }\n\n  onMouseOut() {\n    this.showData = false;\n  }\n\n  ngOnInit() {\n    setInterval(() => {\n      this.data2 = getNewData(); //\n\n      this.rectX = Math.random() * 100;\n      this.rectY = Math.random() * 100;\n    }, 1000);\n  }\n\n};\n\nGraphCanvasComponent.ɵfac = function GraphCanvasComponent_Factory(t) {\n  return new (t || GraphCanvasComponent)();\n};\n\nGraphCanvasComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GraphCanvasComponent,\n  selectors: [[\"app-graph-canvas\"]],\n  hostBindings: function GraphCanvasComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mousemove\", function GraphCanvasComponent_mousemove_HostBindingHandler($event) {\n        return ctx.onMouseMove($event);\n      })(\"mousewheel\", function GraphCanvasComponent_mousewheel_HostBindingHandler($event) {\n        return ctx.onMouseWheel($event);\n      })(\"keydown\", function GraphCanvasComponent_keydown_HostBindingHandler($event) {\n        return ctx.onKeyDown($event);\n      }, false, i0.ɵɵresolveWindow)(\"keyup\", function GraphCanvasComponent_keyup_HostBindingHandler($event) {\n        return ctx.onKeyUp($event);\n      }, false, i0.ɵɵresolveWindow)(\"mouseup\", function GraphCanvasComponent_mouseup_HostBindingHandler() {\n        return ctx.onMouseOn();\n      })(\"mouseout\", function GraphCanvasComponent_mouseout_HostBindingHandler() {\n        return ctx.onMouseOut();\n      });\n    }\n  },\n  decls: 6,\n  vars: 16,\n  consts: [[1, \"first\"], [3, \"x\", \"y\", \"w\", \"h\"], [3, \"data\", \"step\", \"deltaX\", \"strokeStyle\"]],\n  template: function GraphCanvasComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"canvas\", 0);\n      i0.ɵɵelement(1, \"rect\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"canvas\");\n      i0.ɵɵelement(3, \"graph-line\", 2)(4, \"graph-line\", 2)(5, \"graph-line\", 2);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"x\", ctx.mouseX)(\"y\", 20)(\"w\", 20)(\"h\", 20);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"data\", ctx.data)(\"step\", ctx.step)(\"deltaX\", ctx.deltaX)(\"strokeStyle\", \"orange\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"data\", ctx.data2)(\"step\", ctx.step)(\"deltaX\", ctx.deltaX)(\"strokeStyle\", \"green\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"data\", ctx.data3)(\"step\", ctx.step)(\"deltaX\", ctx.deltaX)(\"strokeStyle\", \"blue\");\n    }\n  },\n  styles: [\"p[_ngcontent-%COMP%]{font-weight:600;color:red}canvas[_ngcontent-%COMP%]{width:100%}.first[_ngcontent-%COMP%]{z-index:11}\"]\n});\nGraphCanvasComponent = __decorate([CanvasComponent], GraphCanvasComponent);\nexport { GraphCanvasComponent }; // tslint:disable-next-line:typedef\n\nfunction getNewData() {\n  const data = [];\n\n  for (let i = 0; i < 1000; i++) {\n    data.push(Math.random() * 40 + 30);\n  }\n\n  return data;\n}","map":null,"metadata":{},"sourceType":"module"}