{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { CanvasElement } from 'angular-canvas';\nconst STEP = 20;\nlet NgGrid = class NgGrid {\n  constructor() {\n    this.deltaX = 0;\n    this.lineWidth = 1;\n    this.step = STEP;\n    this.horizontal = false; // Attributes\n\n    this.strokeStyle = 'gray';\n  }\n\n  removeChild(oldChild) {\n    this.parent.removeChild(oldChild);\n  }\n\n  setNgAttribute(name, value, namespace) {\n    this[name] = value;\n    this.parent && this.parent.drawAll();\n  }\n\n  setNgProperty(name, value) {\n    this[name] = value;\n    this.parent.drawAll();\n  }\n\n  draw(context) {\n    const viewWidth = this.parent.element.width;\n    const viewHeight = this.parent.element.height;\n    const deltaX = this.deltaX;\n    const step = this.step;\n    const dxPointsCount = Math.floor(Math.abs(deltaX / step));\n    const viewPointsCount = Math.floor(Math.abs(viewHeight / step));\n    context.beginPath();\n\n    for (let value = dxPointsCount; value <= viewPointsCount; value += step) {\n      const y = Math.round(value);\n      context.moveTo(0, deltaX + y);\n      context.lineTo(viewWidth, deltaX + y);\n    } // draw vertical lines\n\n\n    const quant = 5;\n    const m = (viewWidth - 1) / (quant - 1);\n\n    for (let i = 0; i < quant; ++i) {\n      const x = Math.round(m * i);\n      context.moveTo(x, 0);\n      context.lineTo(x, viewHeight);\n    } // styling this component\n\n\n    context.lineWidth = this.lineWidth;\n    context.strokeStyle = this.strokeStyle;\n    context.stroke();\n  }\n\n};\nNgGrid = __decorate([CanvasElement({\n  selector: 'grid'\n})], NgGrid);\nexport { NgGrid };","map":null,"metadata":{},"sourceType":"module"}